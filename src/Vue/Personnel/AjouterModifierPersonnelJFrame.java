package Vue.Personnel;

import Model.Competence;
import Model.Entreprise;
import Model.Personnel;
import static Model.Personnel.formatDate;
import java.awt.Container;
import java.awt.FlowLayout;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author guilhem, sandeox
 */
public class AjouterModifierPersonnelJFrame extends javax.swing.JFrame {
    private int id;
    private JTable jtB;
    private int rInd;
    private int cInd;
    /**
     * Creates new form AjouterPersonnelJFrame
     */
    public AjouterModifierPersonnelJFrame() {
        initComponents();
        this.setLocationRelativeTo(null); // positionner la fenetre au centre de l'écran
        Container content = this.getContentPane();
        content.setLayout(new FlowLayout(FlowLayout.CENTER));
        this.setResizable(false); //la fenetre ne peut pas etre redimensionée
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); //fermer la JFrame sans arrêter l'application
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jBtnEnregistrer = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();
        jBtnDeletePers = new javax.swing.JButton();
        jPanelInfosPersonnel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNom = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldPrenom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldDateEntree = new javax.swing.JTextField();
        jPanelCompetence = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCompetences = new javax.swing.JList<>();
        jButtonSupprimerCompetence = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListAjouterCompetence = new javax.swing.JList<>();
        jBtnAddCompetence = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBtnEnregistrer.setText("Enregistrer");
        jBtnEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEnregistrerActionPerformed(evt);
            }
        });

        jBtnCancel.setText("Annuler");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        jBtnDeletePers.setText("Supprimer la personne");
        jBtnDeletePers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDeletePersActionPerformed(evt);
            }
        });

        jPanelInfosPersonnel.setBorder(javax.swing.BorderFactory.createTitledBorder("Informations générales"));

        jLabel2.setText("Nom :");

        jTextFieldNom.setText("nom");

        jLabel3.setText("Prénom :");

        jTextFieldPrenom.setText("prenom");

        jLabel4.setText("Date d'entrée :");

        jTextFieldDateEntree.setText("dateEntree");

        javax.swing.GroupLayout jPanelInfosPersonnelLayout = new javax.swing.GroupLayout(jPanelInfosPersonnel);
        jPanelInfosPersonnel.setLayout(jPanelInfosPersonnelLayout);
        jPanelInfosPersonnelLayout.setHorizontalGroup(
            jPanelInfosPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfosPersonnelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInfosPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInfosPersonnelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInfosPersonnelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelInfosPersonnelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldDateEntree, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelInfosPersonnelLayout.setVerticalGroup(
            jPanelInfosPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfosPersonnelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelInfosPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanelInfosPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelInfosPersonnelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelInfosPersonnelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(17, 17, 17))
                    .addGroup(jPanelInfosPersonnelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldDateEntree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))))
        );

        jPanelCompetence.setBorder(javax.swing.BorderFactory.createTitledBorder("Compétences"));

        jScrollPane1.setViewportView(jListCompetences);

        jButtonSupprimerCompetence.setText("Supprimer");
        jButtonSupprimerCompetence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerCompetenceActionPerformed(evt);
            }
        });

        jLabel1.setText("Ajouter une compétence :");

        jScrollPane2.setViewportView(jListAjouterCompetence);

        jBtnAddCompetence.setText("Ajouter");
        jBtnAddCompetence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddCompetenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCompetenceLayout = new javax.swing.GroupLayout(jPanelCompetence);
        jPanelCompetence.setLayout(jPanelCompetenceLayout);
        jPanelCompetenceLayout.setHorizontalGroup(
            jPanelCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCompetenceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCompetenceLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSupprimerCompetence))
                    .addGroup(jPanelCompetenceLayout.createSequentialGroup()
                        .addGroup(jPanelCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jBtnAddCompetence, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelCompetenceLayout.setVerticalGroup(
            jPanelCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCompetenceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSupprimerCompetence)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCompetenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnAddCompetence)
                    .addGroup(jPanelCompetenceLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtnDeletePers, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBtnEnregistrer)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelCompetence, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelInfosPersonnel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanelInfosPersonnel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelCompetence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnDeletePers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtnEnregistrer)
                        .addComponent(jBtnCancel)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEnregistrerActionPerformed
        //On est en modification
        if(jBtnEnregistrer.getText()=="Enregistrer"){
            try{
               modifier(); 
            }catch(Exception e){System.err.println(e.getMessage());}
            
        }
        //On est en ajout
        if(jBtnEnregistrer.getText()=="Ajouter"){
            ajouter();
        }
      
    }//GEN-LAST:event_jBtnEnregistrerActionPerformed
    

    private void jButtonSupprimerCompetenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerCompetenceActionPerformed
        if(!jListCompetences.isSelectionEmpty()){
            //Get the actual person
            Personnel p = Entreprise.findPersonnelById(id);
            //Switch to ID to upd
            String id = Entreprise.getIdCompetenceByFrName(jListCompetences.getSelectedValue());
            //System.out.println("ID :"+id);
            p.supprimerCompetence(id);
            //Upd both List
            remplirListesCompetences(p);
            jListCompetences.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jButtonSupprimerCompetenceActionPerformed

    private void jBtnAddCompetenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddCompetenceActionPerformed
         if(!jListAjouterCompetence.isSelectionEmpty()){
            //Get the actual person
            Personnel p = Entreprise.findPersonnelById(id);
            //Switch to ID to upd
            String id = Entreprise.getIdCompetenceByFrName(jListAjouterCompetence.getSelectedValue());
            p.ajouterCompetence(id);
            //Upd both List
            remplirListesCompetences(p);
            jListAjouterCompetence.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jBtnAddCompetenceActionPerformed

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        dispose(); //ferme la fenêtre
    }//GEN-LAST:event_jBtnCancelActionPerformed

    private void jBtnDeletePersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDeletePersActionPerformed
        //Get the actual person
        try{
        Personnel p = Entreprise.findPersonnelById(id);
        Entreprise.removePersonnel(p, id);
        int rowToDel = this.jtB.convertRowIndexToModel(rInd);
        ((DefaultTableModel)this.jtB.getModel()).removeRow(rowToDel);
        }catch(Exception e){System.out.println(e.getMessage());}
        jtB.setColumnSelectionInterval(0,0);
        jtB.setRowSelectionInterval(0,0);
        dispose();
    }//GEN-LAST:event_jBtnDeletePersActionPerformed
    
    public void remplirCompetenceEmpty(){
       /*--- Fill Empty Competences ---- */
       //Define the two model
       DefaultListModel emptyCompetences = new DefaultListModel();
       DefaultListModel fullCompetences = new DefaultListModel();
       //Define the two hashMap
       HashMap<String, Competence> emptySkill = new HashMap();
       HashMap<String, Competence> fullSkill = Entreprise.getCompetences();
       //Fill the map with skill
       for(Map.Entry<String, Competence> competence : fullSkill.entrySet()) {
            try{
                    String libFra = competence.getValue().getLibelleFra();
                    //Set the hasmap with the competence
                    fullCompetences.addElement(libFra);  
            }catch(Exception e){System.out.println(e.getMessage());}
            
        }
       jListCompetences.setModel(emptyCompetences);
       jListAjouterCompetence.setModel(fullCompetences);
    }
    

    public void remplirFormPersonnel(int id, JTable jtB, int rI, int cI){
        this.jtB = jtB;
        this.rInd=rI;
        this.cInd=cI;
        if(id==-1){
            setLabel(); //Définir les valeurs vides
            //remplirCompetenceEmpty(); For 1 action creation with button cancel
            jPanelCompetence.setVisible(false);
            this.pack();
        }
        else{
            //On modifie !
           this.setTitle("Modifier un Personnel");
           jBtnEnregistrer.setText("Enregistrer");
           Personnel p = Entreprise.findPersonnelById(id);

           //System.out.println(p);

           jTextFieldNom.setText(p.getNom());
           jTextFieldPrenom.setText(p.getPrenom());
           jTextFieldDateEntree.setText(p.getDateNaissString()); 
           this.id = id; //Stock l'id pour la modification
           remplirListesCompetences(p);
           
        }
    }
    
    public HashMap remplirMesCompetences(Personnel p){
        /*---- Fill known skill ------*/
        //Define model
        DefaultListModel modelListeCompetence = new DefaultListModel();
        //Get skill from Enterprise in Hashmap
        HashMap<String, Competence> competences = Entreprise.getPersonnelCompetence(p);
        //Loop the hashmap lulz
        try{
            
        
        for(Map.Entry<String, Competence> competence : competences.entrySet()) {
            //Fr lib
            String libFra = competence.getValue().getLibelleFra();
            modelListeCompetence.addElement(libFra);
            
        }
        
        }catch(Exception e){System.out.println(e.getMessage());}
        //Set the model on the IHM
        jListCompetences.setModel(modelListeCompetence);
       
        //System.out.println(competences);
        return competences;
    }
    
    public HashMap getUnknownCompetence(HashMap<String, Competence> knownCompetence){
       /*--- Get unknown skill ---- */
       //New Hashmap
       HashMap<String, Competence> unknownSkill = new HashMap();
       //Get all skill from enterprise
       HashMap<String, Competence> competencesEnterprise = Entreprise.getCompetences();
       //compare with skill of the personnal
       for(Map.Entry<String, Competence> competence : competencesEnterprise.entrySet()) {
            try{
               if(!knownCompetence.containsKey(competence.getKey())){
                   //Fr lib
                    String libFra = competence.getValue().getLibelleFra();
                    //Set the hasmap with the competence
                    unknownSkill.put(competence.getKey(), competencesEnterprise.get(competence.getKey()));
               }
            }catch(Exception e){System.out.println(e.getMessage());}
            
        }
       return unknownSkill;
    }
    
    public void remplirListesCompetencesNonAcquise(HashMap<String, Competence> knownCompetence){
        /*---- Fill unknown skill ------*/
        //Define model
        DefaultListModel modelAddCompetence = new DefaultListModel();
        HashMap<String, Competence> unknownCompetences = getUnknownCompetence(knownCompetence);
        for(Map.Entry<String, Competence> competence : unknownCompetences.entrySet()) {
            try{
                //Fr lib
                String libFra = competence.getValue().getLibelleFra();
                modelAddCompetence.addElement(libFra);
            }catch(Exception e){System.out.println(e.getMessage());}
            
        }
        //Set the model in the IHM
        jListAjouterCompetence.setModel(modelAddCompetence);
    }
    
    public void remplirListesCompetences(Personnel p){
        /* --- Remplir compétences du personnel --- */
        HashMap<String, Competence> personnalCompetence = remplirMesCompetences(p);
        //System.out.println(personnalCompetence);
        /* --- Remplir les compétences non acquise avec les compétences du personnel--- */
        remplirListesCompetencesNonAcquise(personnalCompetence);
        
    }
    
    public void setLabel(){
        //On ajoute !
        this.setTitle("Ajouter un Personnel");
        jBtnEnregistrer.setText("Ajouter");
        jTextFieldNom.setText("");
        jTextFieldPrenom.setText("");
        jTextFieldDateEntree.setText("");
        jBtnDeletePers.setVisible(false);
        
    }
    
    public String updateJtableCompetence(){
       /* --- ⓘ update col competence--- */
         Personnel p = Entreprise.findPersonnelById(id);
         int nbCompetence = p.getListeCompetences().size();
         return "ⓘ "+nbCompetence;
    }
    
    public void modifier() throws ParseException{
        if(valide()){
            //Récupère les champs nom et prénom
           String nom = jTextFieldNom.getText();
           String prenom = jTextFieldPrenom.getText();
           //Récupère la date
           Calendar dateNaissance = Calendar.getInstance();
           dateNaissance.setTime(formatDate.parse(jTextFieldDateEntree.getText()));
           String date = jTextFieldDateEntree.getText();
           
           
           //upd the personnel with corresponding value
           Entreprise.updBasicValuePersonnel(this.id, nom, prenom, dateNaissance);
           //System.out.println(Entreprise.afficherPersonnel()); 
           
           /* ------ Update du Jtable ------*/
           this.jtB.setValueAt(nom, this.rInd, this.cInd);
           this.jtB.setValueAt(prenom, this.rInd, this.cInd+1);
           this.jtB.setValueAt(date, this.rInd, this.cInd+2);
           //update du Jtable pour le tooltip competence
           String competence = updateJtableCompetence();
           this.jtB.setValueAt(competence, this.rInd, this.cInd+3);
           dispose(); //ferme la fenêtre
        }
    }
    
    public int getRowById(JTable model, int jtId) {
        
        int found = 0;
        int idToFound = -1;

        for (int i = model.getRowCount() - 1; i >= 0; --i) {
            try{
                Object colIdValue = model.getModel().getValueAt(jtB.convertRowIndexToModel(i), 0);
                 
                   //parse object to string then int
                   String stringId = (String) colIdValue;
                    idToFound = Integer.parseInt(stringId);
                    //System.out.println("idToFind"+idToFound);
            }catch(Exception e){} 
                if (idToFound == jtId) {
                    found = i;
                    //System.out.println("fund"+found);
                    break;
                }
           
        }
        return found;
    }
    
    public void ajouter(){
        /* ---- Valide alors je l'ajoute ---- */
        if(valide()){
           String nom = jTextFieldNom.getText();
           String prenom = jTextFieldPrenom.getText();
           String date = jTextFieldDateEntree.getText();
           Personnel p = new Personnel(nom, prenom, date);
           int idP = Entreprise.addPersonnel(p);

           /*-------- Ajout au Jtable ----------*/
           String line = idP+";"+nom+";"+prenom+";"+date;
            String[] laLigne = line.split(";");
           ((DefaultTableModel) this.jtB.getModel()).addRow(laLigne);
           // Focus sur la row pour la ré-ouvrir
           int rowTofocus = getRowById(jtB, idP);
           jtB.setColumnSelectionInterval(0,0);
           jtB.setRowSelectionInterval(0,0);
           jtB.changeSelection(rowTofocus, ICONIFIED, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            
           /* ---- Reload la frame pour passer en mode modifier et ajouter les compétences --- */
            //Load Frame with selected ID
            AjouterModifierPersonnelJFrame apf = new AjouterModifierPersonnelJFrame();
            apf.setVisible(true);
            /* -- Envoie de l'id pour remplir la frame, envois de la ligne pour actualiser --------*/
            apf.remplirFormPersonnel(idP, jtB,jtB.getSelectedRow(), 0);   
            dispose(); //ferme la fenêtre
            }
    }
    
    public boolean valide(){
        int ok = 0;
        //Test du nom
        if(jTextFieldNom.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Veuillez renseigner le nom du personnel");
            return false;
        }
        else{ok++;}
        //Test du prenom
        if(jTextFieldPrenom.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Veuillez renseigner le prenom du personnel"); 
            return false;
        }
        else{ok++;}
        //Test de la date
        if(jTextFieldDateEntree.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Veuillez renseigner la date d'entrée du personnel"); 
            return false;
        }
        else{ok++;}
        try{
            Calendar dateNaissance = Calendar.getInstance();
            dateNaissance.setTime(formatDate.parse(jTextFieldDateEntree.getText()));
            ok++;
        }
        catch(ParseException e){
            JOptionPane.showMessageDialog(null, "La date n'est pas au format dd/MM/yyyy"); 
            e.printStackTrace();
        }
        //Tout les tests passent
        return ok==4;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAddCompetence;
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnDeletePers;
    private javax.swing.JButton jBtnEnregistrer;
    private javax.swing.JButton jButtonSupprimerCompetence;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListAjouterCompetence;
    private javax.swing.JList<String> jListCompetences;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCompetence;
    private javax.swing.JPanel jPanelInfosPersonnel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldDateEntree;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldPrenom;
    // End of variables declaration//GEN-END:variables
}
